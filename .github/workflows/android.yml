name: Android CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      flavor:
        type: choice
        description: Flavor a construir
        options: [dev, prod]
        default: dev

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      # Si no vienes de workflow_dispatch, por defecto usa prod en push
      FLAVOR: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.flavor || 'prod' }}

      # Firma
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # Firebase
      FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
      FIREBASE_APP_ID_DEV: ${{ secrets.FIREBASE_APP_ID_DEV }}
      FIREBASE_APP_ID_PROD: ${{ secrets.FIREBASE_APP_ID_PROD }}
      FIREBASE_PROJECT_DEV: ${{ secrets.FIREBASE_PROJECT_DEV }}
      FIREBASE_PROJECT_PROD: ${{ secrets.FIREBASE_PROJECT_PROD }}

      # google-services.json opcional como secreto
      GOOGLE_SERVICES_DEV_JSON: ${{ secrets.GOOGLE_SERVICES_DEV_JSON }}
      GOOGLE_SERVICES_PROD_JSON: ${{ secrets.GOOGLE_SERVICES_PROD_JSON }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter (3.32.2)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'

      # ✅ Instala Android SDK y deja sdkmanager disponible
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            platforms;android-35
            build-tools;35.0.0

      # (Opcional) colocar google-services.json desde secretos
      - name: Put google-services.json per flavor
        if: ${{ env.GOOGLE_SERVICES_DEV_JSON != '' || env.GOOGLE_SERVICES_PROD_JSON != '' }}
        run: |
          mkdir -p android/app/src/${FLAVOR}
          if [ "${FLAVOR}" = "dev" ]; then
            printf '%s' "${GOOGLE_SERVICES_DEV_JSON}" > android/app/src/dev/google-services.json
          else
            printf '%s' "${GOOGLE_SERVICES_PROD_JSON}" > android/app/src/prod/google-services.json
          fi

      - name: Restore keystore & key.properties
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          mkdir -p android/app/keystore
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/keystore/my-release-key.jks
          cat > android/key.properties <<'EOF'
          storePassword=${KEYSTORE_PASS}
          keyPassword=${KEY_PASSWORD}
          keyAlias=${KEY_ALIAS}
          storeFile=app/keystore/my-release-key.jks
          EOF

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK
        run: |
          if [ "${FLAVOR}" = "dev" ]; then TARGET="lib/main_dev.dart"; else TARGET="lib/main_prod.dart"; fi
          flutter build apk --flavor ${FLAVOR} --target ${TARGET}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.FLAVOR }}-release
          path: build/app/outputs/flutter-apk/app-${{ env.FLAVOR }}-release.apk

      # Selecciona variables de Firebase según flavor
      - name: Select Firebase vars
        id: pick
        run: |
          if [ "${FLAVOR}" = "dev" ]; then
            echo "APP_ID=${FIREBASE_APP_ID_DEV}" >> $GITHUB_OUTPUT
            echo "PROJECT=${FIREBASE_PROJECT_DEV}" >> $GITHUB_OUTPUT
            echo "GROUPS=testers-dev" >> $GITHUB_OUTPUT
          else
            echo "APP_ID=${FIREBASE_APP_ID_PROD}" >> $GITHUB_OUTPUT
            echo "PROJECT=${FIREBASE_PROJECT_PROD}" >> $GITHUB_OUTPUT
            echo "GROUPS=testers" >> $GITHUB_OUTPUT
          fi

      # Distribución a Firebase (usa cuenta de servicio)
      - name: Distribute to Firebase App Distribution
        if: ${{ env.FIREBASE_SERVICE_ACCOUNT_JSON != '' }}
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ steps.pick.outputs.APP_ID }}
          project: ${{ steps.pick.outputs.PROJECT }}
          groups: ${{ steps.pick.outputs.GROUPS }}
          serviceCredentialsFileContent: ${{ env.FIREBASE_SERVICE_ACCOUNT_JSON }}
          file: build/app/outputs/flutter-apk/app-${{ env.FLAVOR }}-release.apk
          releaseNotes: CI build ${{ github.run_number }}